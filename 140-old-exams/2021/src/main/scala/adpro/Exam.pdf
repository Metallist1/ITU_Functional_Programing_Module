%!PS-Adobe-3.0
%%Title: Exam.scala
%%For: Andrzej Wasowski
%%Creator: a2ps version 4.14
%%CreationDate: Mon Jan  3 12:06:12 2022
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/************************************************************************) p n
( * Final Exam: Advanced Programming by Andrzej W\304M-^Esowski) N
( * IT University of Copenhagen, Autumn 2020: 10 January 2022, 15:00) N
( *) N
( * The exam consists of 13 questions to be solved within 4 hours.) N
( *) N
( * You can use  any function from the course  \(textbook, exercises\) in) N
( * the solutions, as  well as  standard library  functions.  You  can) N
( * access any written or electronic material, also online, but you are) N
( * not allowed to communicate with anybody.  By  submitting, you) N
( * legally declare to have solved the problems alone, without) N
( * communicating with anybody.) N
( *) N
( * Solve the tasks in the file 'Exam.scala' \(this file\) found in the) N
( * zip archive made available on LearnIt.) N
( *) N
( * Submit this file and only this file to learnIT. Do not convert to) N
( * any other format than .scala.  Do not submit the entire zip) N
( * archive. Do not  reorder the  answers, and  do not  remove question) N
( * numbers from the file.  The only accepted file format is '.scala'.) N
( *) N
( * Keep the solutions within 80 columns width to make grading easier.) N
( *) N
( * The  answers  will   be  graded  manually. We  focus  on  the) N
( * correctness of ideas, the use  of concepts, clarity, and style. We) N
( * are permissive on minor issues  such as semicolons,  commas, other) N
( * punctuation, small deviations  in function  names, switching) N
( * between  curried and not curried arguments,  etc.  We  will not) N
( * check whether  the type inference succeeds.   It suffices  that a) N
( * human reader  could infer types.) N
( *) N
( * We do not recommend solving questions to the point when they) N
( * compile and pass tests.  Dependency problems  and other technical) N
( * issues can take a lot of time, so only do this, once you are done) N
( * with drafting all answers.  If  you do compile,  you can use the) N
( * 'build.sbt' file provided  in the  zip  archive linked  above. It) N
( * has the  necessary library dependencies  configured, and the) N
( * source files from the semester are included.) N
( *) N
( * The  percentage  at  the   beginning  of  each  question  will be) N
( * used as a soft indicative weight in grading.) N
( *) N
( * Good luck!) N
( */) N
() N
(package adpro) N
() N
(import org.scalacheck.Arbitrary) N
(import org.scalacheck.Arbitrary._) N
(import org.scalatestplus.scalacheck.ScalaCheckPropertyChecks._) N
(import org.scalatest.matchers.should.Matchers._) N
(import org.scalactic.Equality) N
() N
(object Q1 {) N
() N
(  /*** WARM-UP) N
(   *) N
(   * Consider the following example of a simple Java class hierarchy.) N
(   * The example is written using Scala syntax so that we do not have) N
(   * to mix languages in the exam.  Recall that in Java all method) N
(   * calls are virtual, so dynamically dispatched.) N
(   *) N
(   * abstract class Printable         { def hello \(\): String = "printable" }) N
(   * class Triangle extends Printable { override def hello\(\): String = "triangle) N
(" }) N
(   * class Square   extends Printable { override def hello\(\): String = "square" ) N
(}) N
(   *) N
(   * Now the following is an ADT in Scala, that realizes the same hierarchy:) N
(Exam.scala) (Page 1/6) (Jan 03, 22 11:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   */) p n
() N
(  trait Printable) N
(  case object Triangle extends Printable) N
(  case object Square extends Printable) N
() N
(  /* Notice that the trait Printable is not sealed.) N
(   *) N
(   * Q1. \(10 %\)) N
(   *) N
(   * Write a function `hello` that uses pattern matching and achieves) N
(   * exactly the same side effect as calling the method hello in Java) N
(   * implementation.  Uncomment the definition and fill in the gaps.) N
(   */) N
(  // def hello \(???: ???\): ??? = ???) N
() N
(}) N
() N
() N
() N
(object Q2 {) N
() N
(  /*** SEQUENCE AND EITHER) N
(   *) N
(   * Q2. \(10%\)) N
(   *) N
(   * Implement the `sequence` function for Either. The behavior) N
(   * should be like with `sequence` for Option: at least one failure) N
(   * \(Left\) in the input list should result in a failure overall, a) N
(   * single Left. Otherwise return the Right values from the input) N
(   * list wrapped in a single Right. For full points make sure that) N
(   * the error value returned, if any, is the *last* error value seen) N
(   * on the input list.) N
(   */) N
() N
(  def sequence[Err,A] \(as: List[Either[Err,A]]\): Either[Err, List[A]] = ???) N
() N
(}) N
() N
() N
() N
(object Q3 {) N
() N
(  /*** TYPING) N
(   *) N
(   * Imagine that we want to implement `sequence` with Either not) N
(   * using List but any collection F[_] for which we know that it is) N
(   * Foldable.) N
(   *) N
(   * Q3. \(10%\)) N
(   *) N
(   * Write the type signature for this new function 'sequence'.) N
(   *) N
(   * Do not implement the function, just put '???' in the body.) N
(   */) N
() N
(   // def sequence ...) N
() N
(}) N
() N
() N
() N
(object Q4 {) N
() N
(  /*** RANDOM VALUE GENERATORS) N
(   *) N
(   * Recall that the type State.Rand[A] is defined as follows:) N
(   *) N
(   * type Rand[A] = State[RNG, A]) N
(Exam.scala) (Page 2/6) (Jan 03, 22 11:42) title
border
grestore
(Printed by Andrzej Wasowski) rhead
(Exam.scala) (1/3) (Monday January 03, 2022) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   *) p n
(   * Q4. \(10%\)) N
(   *) N
(   * Implement a pure generator of triples, where the first two) N
(   * components are random integers 'a' and 'b', whereas the third) N
(   * component 'x' is a random double number between them, so the) N
(   * following constraint is satisfied:) N
(   *) N
(   *     a <= x <= b) N
(   */) N
() N
(  import State._) N
() N
(  lazy val riid: Rand[\(Int,Int,Double\)] = ???) N
() N
(}) N
() N
() N
() N
(object Q5 {) N
() N
(  /*** TYPE EXTENSIONS) N
(   *) N
(   * Recall that we have two representations of Rand in State.scala:) N
(   *) N
(   * - A type called RNG.Rand:) N
(   *) N
(   *   type Rand[+A] = RNG => \(A, RNG\)) N
(   *) N
(   * - A type called State.Rand:) N
(   *) N
(   *   type Rand[A] = State[RNG, A]) N
(   *) N
(   * In State.scala many more functions are available for RNG.Rand) N
(   * than for State.Rand \(because State is a more abstract interface) N
(   * that can be used for other things, so it does not know that we) N
(   * are dealing with RNG inside\).  One example of such function is) N
(   * `Rand.both`:) N
(   *) N
(   * def both[A,B] \(ra: Rand[A], rb: Rand[B]\): Rand[\(A,B\)]) N
(   *) N
(   * Q5. \(5%\)) N
(   *) N
(   * Make all functions of RNG.Rand available for State.Rand by a) N
(   * suitable type conversion:) N
(   */) N
() N
(  // ...) N
() N
(  // \(the question continues below\)) N
() N
(}) N
() N
(/* Q6. \(5%\)) N
( *) N
( * Explain in English the mechanism you have used to achieve this. How) N
( * does your solution achieve the objective of Q5?) N
( *) N
( * Indicative length: 2-5 lines.) N
( */) N
() N
(// write here ...) N
() N
() N
(object Q7 {) N
() N
(  /*** LAZY STREAMS) N
(   *) N
(   * Let's assume that we have the following function 'size' implemented that) N
(Exam.scala) (Page 3/6) (Jan 03, 22 11:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   * computes the lengths of a lazy stream. \(The function should be correct, no) p n
(   * point to seek traps in it.\)) N
(   */) N
() N
(  def size[A] \(s: Stream[A]\): Int = {) N
(    def f \(s: Stream[A], acc: Int\): Int = s match {) N
(      case Cons \(_, t\) =>  f \(t \(\), acc+1\)) N
(      case Empty => acc) N
(    }) N
(    f \(s, 0\)) N
(  }) N
() N
(  /* Q7. \(5%\)) N
(   *) N
(   * What is the problem with writing s.size >= 10 to check whether the stream) N
(   * is at least 10 elements? Explain.) N
(   */) N
() N
(  // Write here ...) N
() N
(}) N
() N
() N
() N
(object Q8 {) N
() N
(  import Q7.size) N
() N
(  /**** A BETTER SIZE FOR LAZY STREAMS) N
(   *) N
(   * Q8. \(5%\)) N
(   *) N
(   * Implement a pure function `checkIfLongerThan` that checks whether) N
(   * a stream is shorter than a given bound. Do not use the standard) N
(   * library functions lengthCompare, sizeCompare, lenghtIs, or) N
(   * sizeIs. You can use 'size' from above, or any other functions) N
(   * from the course.) N
(   */) N
() N
(  def  checkIfLongerEqThan[A] \(s: Stream[A]\) \(n: Int\): Boolean = ???) N
() N
(}) N
() N
() N
() N
(object Q9 {) N
() N
(  import Q8.checkIfLongerEqThan) N
() N
(  /*** Testing) N
(   *) N
(   * Assume we have a solution for question Q8 \(even if you skipped) N
(   * it\), so that we have a function:) N
(   *) N
(   *    checkIfLongerEqThan[A] \(s: Stream[A]\) \(n: Int\): Boolean) N
(   *) N
(   * that returns true if and only if the stream 's' has at least 'n') N
(   * elements.) N
(   *) N
(   *) N
(   * Q9. \(10%\)) N
(   *) N
(   * Use it to write a property-based test that checks if the size of) N
(   * every nonEmpty stream concatenated with itself is larger or equal) N
(   * than 2.) N
(   */) N
() N
(  class MySpec) N
(    extends org.scalatest.freespec.AnyFreeSpec) N
(Exam.scala) (Page 4/6) (Jan 03, 22 11:42) title
border
grestore
(Printed by Andrzej Wasowski) rhead
(Exam.scala) (2/3) (Monday January 03, 2022) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    with org.scalatest.matchers.should.Matchers) p n
(    with org.scalatestplus.scalacheck.ScalaCheckPropertyChecks {) N
() N
(    import org.scalacheck.Gen) N
() N
(    implicit lazy val arbStream: Arbitrary[Stream[Int]] =) N
(      Arbitrary {) N
(        Gen.listOf \(Gen.choose \(1, 100\)\)) N
(           .map { l => Stream \(l: _*\) }) N
(      }) N
() N
(    "Write the test here by replacing 'fail' below" in {) N
() N
(      fail \(\)) N
() N
(    }) N
() N
(  }) N
(}) N
() N
() N
() N
(object Q10 {) N
() N
(  import Par._) N
() N
(  /*** PARALLEL OPTIONS) N
(   *) N
(   * Q10. \(10%\)) N
(   *) N
(   * Write a function which 'flattens' a Par[Opt[A]] value to a) N
(   * Opt[Par[A]] value, for any type 'A'.) N
(   */) N
() N
(  def flatten[A] \(opa: Option[Par[A]]\): Par[Option[A]] = ???) N
() N
(}) N
() N
() N
() N
(/*** Par[Option[_]] vs Option[Par[_]]) N
( *) N
( * Q11. \(5%\)) N
( *) N
( * Explain in English what the function from Q10 achieves.) N
( * Provide its user oriented description, not an explanation of the) N
( * implementation.) N
( */) N
() N
( // Write here ...) N
() N
() N
() N
(object Q12 {) N
() N
(  /*** MONADS) N
(   *) N
(   * Recall the Identity Monad, the simplest possible monad, which) N
(   * allows unit \(identity\) and mapping \(function application\) on any) N
(   * type.) N
(   */) N
() N
(  type Id[A] = A) N
() N
(  implicit val idMonad = new Monad[Id] {) N
() N
(    def unit[A] \(a: => A\): Id[A] = a) N
(    def flatMap[A,B] \(a: Id[A]\) \(f: A => Id[B]\): Id[B] = f\(a\)) N
(  }) N
(Exam.scala) (Page 5/6) (Jan 03, 22 11:42) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  /* Now assume that there is a function loop of the following type.) N
(   **/) N
() N
(  def loop[A, M[_]: Monad] \(initial: M[A]\) \(body: A => A\) \(p: A => Boolean\): M[A) N
(] = ???) N
() N
(  /* This function runs a loop 'in the monad M'.  It starts at the) N
(   * initial value, then it applies the function 'body' as long as the) N
(   * produced value of the type 'A' satisfies the predicate 'p'.) N
(   *) N
(   *) N
(   * The code below computes a sum of list of integers.) N
(   * \(Warning: imperative code below\)) N
(   *) N
(   * def sum \(var l: List[Int]\): Int = {) N
(   *   var result = 0) N
(   *   while \(l.nonEmpty\) {) N
(   *     result = result + l.head) N
(   *     l = l.tail) N
(   *   }) N
(   *   return result) N
(   * }) N
(   *) N
(   * Q12. \(10%\)) N
(   *) N
(   * Convert the above imperative implementation of 'sum' into a pure one by) N
(   * using the 'loop' function and the identity monad.  The implementation has) N
(   * been started for you.  Complete it by replacing '???' \(you may uncomment th) N
(e) N
(   * code\):) N
(   */) N
() N
(  // def sum \(l: List[Int]\): Int = {) N
() N
(  //   val initial: \(List[Int], Int\) = ???) N
(  //   val body = ???) N
(  //   val p = ???) N
() N
(  //   val result = loop[???,???] \(initial\) \(body\) \(p\)) N
(  //   result._2) N
(  // }) N
() N
(  /* DISCLAIMER: Normally, we do not want to compute a sum of a list in this way) N
(.) N
(   * This is an artificial exercise for simplicity.) N
(   */) N
(}) N
() N
() N
() N
(object Q13 {) N
() N
(  /*** LOOPING IN A MONAD) N
(   *) N
(   * Q13. \(10%\)) N
(   *) N
(   * Implement the function 'loop' from the above exercise that iterates a) N
(   * calculation in a monad. Given an initial value of type A it checks \(like a) N
(   * while loop\) whether it satisfies the predicate p. If not it returns the) N
(   * value.) N
(   */) N
() N
(  def loop[A, M[_]: Monad] \(initial: M[A]\) \(body: A => A\) \(p: A => Boolean\): M[A) N
(] = ???) N
() N
(}) N
(Exam.scala) (Page 6/6) (Jan 03, 22 11:42) title
border
grestore
(Printed by Andrzej Wasowski) rhead
(Exam.scala) (3/3) (Monday January 03, 2022) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
